
TypeScript Richtlinien:

- VS Code -> Settings -> Default Formatter -> TypeScript and JavaScript Language Features
- TypeScript to JavaScript Compiler Options => siehe tsconfig.json
- Type Definition in TypeScript
- camelCase => Functions and Variables /  PascalCase => Classes



db.exec(sql)
    Führt ein einfaches SQL-Statement aus
    Rückgabe: void
    Wann benutzen? z. B. bei CREATE TABLE

db.prepare(sql)
    Erstellt ein vorbereitetes SQL-Statement
    Rückgabe: Statement-Objekt
    Wann benutzen? z. B. bei INSERT, SELECT, UPDATE, DELETE

stmt.run(params)
    Führt das vorbereitete Statement aus (ohne Rückgabedaten)
    Rückgabe: Info-Objekt mit lastInsertRowid, changes usw.
    Wann benutzen? z. B. bei INSERT, UPDATE, DELETE

stmt.get(params)
    Führt SELECT aus und gibt ein Ergebnis zurück
    Rückgabe: Objekt oder undefined
    Wann benutzen? z. B. SELECT * FROM users WHERE id = ?

stmt.all(params)
    Führt SELECT aus und gibt alle Ergebnisse zurück
    Rückgabe: Array von Objekten
    Wann benutzen? z. B. SELECT * FROM users



SQL-Injection

    Beispiel (sicher):
        const stmt = db.prepare("INSERT INTO users (username) VALUES (?)");
        stmt.run("robert'); DROP TABLE users;--");

    Beispiel (unsicher):
        const username = "robert'); DROP TABLE users;--";
        const sql = `INSERT INTO users (username) VALUES ('${username}')`;
        db.exec(sql);

==>>    INSERT INTO users (username) VALUES ('robert');
        DROP TABLE users;--');



Modules:
    Web:
        Use a framework to build the backend. (1)
        Use a framework or a toolkit to build the frontend. (0.5)
        Use a database for the backend. (0.5)

    User Management:
        Standard user management, authentication, users across tournaments. (1)

    Gameplay and user experience:
        Remote players (1)
?       Multiplayer (more than 2 players in the same game). (1)
?       Add another game with user history and matchmaking. (1)
?       Game customization options. (0.5)

    AI-Algo
?       User and game stats dashboards (0.5)

    Cybersecurity:
        Implement Two-Factor Authentication (2FA) and JWT. (1)

    Grapics
?       Use advanced 3D techniques. (1)

    Accessibility
?       Support on all devices.  (0.5)
?       Expanding browser compatibility. (0.5)
?       Supports multiple languages. (0.5)
?       Add accessibility features for visually impaired users. (0.5)
?       Server-Side Rendering (SSR) integration. (0.5)

    Server-Side Pong
        Replace basic Pong with server-side Pong and implement an API. (1)

Sum: 6-13.5
